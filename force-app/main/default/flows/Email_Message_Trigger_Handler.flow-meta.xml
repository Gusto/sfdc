<?xml version="1.0" encoding="UTF-8"?>
<Flow xmlns="http://soap.sforce.com/2006/04/metadata">
    <apiVersion>54.0</apiVersion>
    <assignments>
        <description>Initializing Fault Line details for fault paths in objExceptionLogEvent record.</description>
        <name>Initialize_Fault_Path_Details</name>
        <label>Initialize Fault Path Details</label>
        <locationX>314</locationX>
        <locationY>539</locationY>
        <assignmentItems>
            <assignToReference>objExceptionLogEvent.Message__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>strExceptionLogMessage</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>objExceptionLogEvent.EventUuid</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>$Flow.InterviewGuid</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>objExceptionLogEvent.Method_Name__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>$Flow.CurrentStage</elementReference>
            </value>
        </assignmentItems>
        <assignmentItems>
            <assignToReference>objExceptionLogEvent.Type__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <stringValue>Flow</stringValue>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>Exception_Log_Event</targetReference>
        </connector>
    </assignments>
    <decisions>
        <name>Is_Mark_Case_As_Action_Required</name>
        <label>Is Mark Case As Action Required</label>
        <locationX>314</locationX>
        <locationY>323</locationY>
        <defaultConnector>
            <targetReference>Is_Vitals_Risk_Out_of_Office_Assignment</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>Yes_Is_Mark_Case_As_Action_Required</name>
            <conditionLogic>9 AND 1 AND 2 AND 3 AND (4 OR (5 AND 6 AND 7 AND 8))</conditionLogic>
            <conditions>
                <leftValueReference>$Record.Incoming</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$User.Data_Migration_Validation__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.ToAddress</leftValueReference>
                <operator>NotEqualTo</operator>
                <rightValue>
                    <stringValue>support@gusto.com</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Parent.Status</leftValueReference>
                <operator>NotEqualTo</operator>
                <rightValue>
                    <stringValue>Closed</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Parent.RecordType.Name</leftValueReference>
                <operator>NotEqualTo</operator>
                <rightValue>
                    <stringValue>Benefits New Plan Case</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Parent.RecordType.Name</leftValueReference>
                <operator>NotEqualTo</operator>
                <rightValue>
                    <stringValue>Benefits Renewal Case</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Parent.RecordType.Name</leftValueReference>
                <operator>NotEqualTo</operator>
                <rightValue>
                    <stringValue>Benefits Change Case</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Parent.RecordType.Name</leftValueReference>
                <operator>NotEqualTo</operator>
                <rightValue>
                    <stringValue>Benefits BoR</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>NEW_RECORD</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Update_Case_Record</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <name>Is_Vitals_Risk_Out_of_Office_Assignment</name>
        <label>Is Vitals Risk Out of Office Assignment</label>
        <locationX>314</locationX>
        <locationY>971</locationY>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>Yes</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>$Record.Parent.RecordType.Name</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <stringValue>Risk Assurance</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Parent.Owner:User.Out_Of_Office__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.CreatedDate</leftValueReference>
                <operator>NotEqualTo</operator>
                <rightValue>
                    <elementReference>$Record.Parent.CreatedDate</elementReference>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Incoming</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$Record.Parent.Status</leftValueReference>
                <operator>NotEqualTo</operator>
                <rightValue>
                    <stringValue>Closed</stringValue>
                </rightValue>
            </conditions>
            <conditions>
                <leftValueReference>$User.Data_Migration_Validation__c</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>Get_Assurance_Queue</targetReference>
            </connector>
            <doesRequireRecordChangedToMeetCriteria>true</doesRequireRecordChangedToMeetCriteria>
            <label>Yes</label>
        </rules>
    </decisions>
    <description>Use this flow to handle updates triggered by changes to email messages. This flow is designed to automate and manage actions required after email updates occur, such as modifying records, sending notifications, or updating related processes. Customize the flow to suit your specific after-update requirements for streamlined and efficient operations.</description>
    <environments>Default</environments>
    <formulas>
        <description>Determine reocrd is new or not.</description>
        <name>NEW_RECORD</name>
        <dataType>Boolean</dataType>
        <expression>ISNEW()</expression>
    </formulas>
    <formulas>
        <name>TODAY</name>
        <dataType>Date</dataType>
        <expression>TODAY()</expression>
    </formulas>
    <interviewLabel>Email Message {!$Flow.CurrentDateTime}</interviewLabel>
    <label>Email Message Trigger Handler</label>
    <processMetadataValues>
        <name>BuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>CanvasMode</name>
        <value>
            <stringValue>AUTO_LAYOUT_CANVAS</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>OriginBuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processType>AutoLaunchedFlow</processType>
    <recordCreates>
        <description>Create Exception Log event from fault line details in objExceptionLogEvent</description>
        <name>Exception_Log_Event</name>
        <label>Exception Log Event</label>
        <locationX>314</locationX>
        <locationY>647</locationY>
        <inputReference>objExceptionLogEvent</inputReference>
    </recordCreates>
    <recordLookups>
        <name>Get_Assurance_Queue</name>
        <label>Get Assurance Queue</label>
        <locationX>50</locationX>
        <locationY>1079</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Assign_OOO_to_Queue</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>DeveloperName</field>
            <operator>EqualTo</operator>
            <value>
                <stringValue>Assurance_Queue</stringValue>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Group</object>
        <queriedFields>Id</queriedFields>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordUpdates>
        <name>Assign_OOO_to_Queue</name>
        <label>Assign OOO to Queue</label>
        <locationX>50</locationX>
        <locationY>1187</locationY>
        <faultConnector>
            <isGoTo>true</isGoTo>
            <targetReference>Initialize_Fault_Path_Details</targetReference>
        </faultConnector>
        <inputAssignments>
            <field>OwnerId</field>
            <value>
                <elementReference>Get_Assurance_Queue.Id</elementReference>
            </value>
        </inputAssignments>
        <inputReference>$Record.Parent</inputReference>
    </recordUpdates>
    <recordUpdates>
        <name>Update_Case_Record</name>
        <label>Update Case Record</label>
        <locationX>50</locationX>
        <locationY>431</locationY>
        <connector>
            <targetReference>Is_Vitals_Risk_Out_of_Office_Assignment</targetReference>
        </connector>
        <faultConnector>
            <targetReference>Initialize_Fault_Path_Details</targetReference>
        </faultConnector>
        <inputAssignments>
            <field>Incoming_Email_Received_Date__c</field>
            <value>
                <elementReference>TODAY</elementReference>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>Incoming_Email_Received__c</field>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </inputAssignments>
        <inputAssignments>
            <field>Requires_Action__c</field>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </inputAssignments>
        <inputReference>$Record.Parent</inputReference>
    </recordUpdates>
    <start>
        <locationX>188</locationX>
        <locationY>0</locationY>
        <connector>
            <targetReference>Is_Mark_Case_As_Action_Required</targetReference>
        </connector>
        <object>EmailMessage</object>
        <recordTriggerType>CreateAndUpdate</recordTriggerType>
        <triggerType>RecordAfterSave</triggerType>
    </start>
    <status>Active</status>
    <textTemplates>
        <description>Exception Log Message containing flow details in a fault path.</description>
        <name>strExceptionLogMessage</name>
        <isViewedAsPlainText>true</isViewedAsPlainText>
        <text>&lt;p&gt;Fault Message: {!$Flow.FaultMessage}&lt;/p&gt;&lt;p&gt;----&lt;/p&gt;&lt;p&gt;Interview Guid: {!$Flow.InterviewGuid}&lt;/p&gt;&lt;p&gt;----&lt;/p&gt;&lt;p&gt;Current Record: {!$Flow.CurrentRecord}&lt;/p&gt;&lt;p&gt;----&lt;/p&gt;&lt;p&gt;You can find failed flow interviews with the link below. The link below is for Production failed interviews, but if you would like to find them in another environment in Setup, simply search for ‘Paused and Failed Flow Interviews’ in Setup’s Quick Find bar, and switch to the All Failed Flow Interviews List View. You can use the interview &quot;Interview Guid&quot; above to locate this specific failures.&amp;nbsp;&amp;nbsp;&lt;/p&gt;&lt;p&gt;https://gusto.lightning.force.com/lightning/setup/Pausedflows/home&lt;/p&gt;</text>
    </textTemplates>
    <variables>
        <description>Exception Log Event Object to capture fault path details.</description>
        <name>objExceptionLogEvent</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>true</isOutput>
        <objectType>Exception_Log_Event__e</objectType>
    </variables>
</Flow>
