@isTest
private class HIBorTransferTriggerHelperTest {
	@testSetup
	static void setup() {
		Utils.skipTrigger(true);
		Tier_Config__c objTierConfig = new TestDataFactory.TierConfigBuilder().build();
		insert objTierConfig;

		Account objAccount = new TestDataFactory.AccountBuilder().setRecordTypeId('Company').setZPCompanyID('700100').setName('Gusto HINewPlanApplication Test').build();
		insert objAccount;

		PriceBook2 objPB = new TestDataFactory.PriceBookBuilder().setName(objTierConfig.New_Price_1__c).setActive().build();
		insert objPB;

		Product2 objProduct = new TestDataFactory.ProductBuilder().setName('Dental').setFamily('Benefit').build();
		insert objProduct;

		List<PricebookEntry> list_PBEntries = new List<PricebookEntry>();
		list_PBEntries.add(new TestDataFactory.PricebookEntryBuilder().setProductId(objProduct.Id).setPriceBookId(Test.getStandardPriceBookId()).setUnitPrice(5).setIsActive(true).build());
		list_PBEntries.add(new TestDataFactory.PricebookEntryBuilder().setProductId(objProduct.Id).setPriceBookId(objPB.id).setUnitPrice(5).setIsActive(true).build());
		insert list_PBEntries;

		State__c objState = new TestDataFactory.StateBuilder().setName('California').setId('5').setAbbreviation('CA').build();
		insert objState;

		Opportunity objOppBOR = new TestDataFactory.OpportunityBuilder()
			.setRecordTypeId(OpportunityUtil.BENEFITS_BOR_OPPTY_RT_ID)
			.setName('Benefits BoR')
			.setAccountId(objAccount.Id)
			.setNumberOfEE(5)
			.setSourceID('Opportunity321')
			.setId('aasmEvent321')
			.setBenefitsState('CA')
			.setStage('Expired')
			.setStageDetail('Closed Lost')
			.setCloseDate(System.today().addDays(30))
			.build();
		insert objOppBOR;

		list<HI_Aasm_Event__c> list_HIAasmEvents = new List<HI_Aasm_Event__c>();
		list_HIAasmEvents.add(new TestDataFactory.HIAasmEventBuilder().setRecordableId('aasmEvent321').setRecordableType('BorTransfer').setTo('benefits_selected').build());
		list_HIAasmEvents.add(new TestDataFactory.HIAasmEventBuilder().setRecordableId('aasmEvent321').setRecordableType('BorTransfer').setTo('carriers_selected').build());
		list_HIAasmEvents.add(new TestDataFactory.HIAasmEventBuilder().setRecordableId('aasmEvent321').setRecordableType('BorTransfer').setTo('forms_created').build());
		list_HIAasmEvents.add(new TestDataFactory.HIAasmEventBuilder().setRecordableId('aasmEvent321').setRecordableType('BorTransfer').setTo('forms_signed').build());
		insert list_HIAasmEvents;

		Benefit_Order__c objBO = new TestDataFactory.BenefitOrderBuilder()
			.setRecordType(Cache.getRecordTypeId('Benefit_Order__c', 'Benefits BoR'))
			.setName('Test Benefit BOR')
			.setAccount(objAccount.Id)
			.setOpp(objOppBOR.Id)
			.setCoverageEffectiveDate(System.today())
			.setOwnerID(UserInfo.getUserId())
			.setSubmissionDeadline(System.today())
			.setStatus('Ready for Qualification')
			.setBORId('aasmEvent321')
			.setStatusDetail('Owner only group')
			.build();
		insert objBO;

		Utils.skipTrigger(false);
	}

	/**
	 * @author       Bhagat Singh
	 * @description  This method is used to test the HI_BoR_Transfer__c record with Status__c as implementing_plans.
	 * @param        NA
	 * @return       NA
	 **/
	@isTest
	static void implementingPlansHIBORTransferRecord() {
		Test.startTest();
		HI_BoR_Transfer__c objHIBorRecord = new TestDataFactory.HIBoRTransferBuilder()
			.setExternalKey('Opportunity321')
			.setCompanyId('700100')
			.setId('aasmEvent321')
			.setStatus('implementing_plans')
			.setBenefitTypes('fsa')
			.setMedicalRenewalMonth('January')
			.build();
		insert objHIBorRecord;

		Test.stopTest();

		List<Benefit_Order__c> list_BOs = [
			SELECT Id, Application_Status__c, Opportunity__r.ID__c, Opportunity__r.Source_ID__c, Opportunity__r.LeadSource
			FROM Benefit_Order__c
			WHERE Opportunity__r.Source_ID__c = 'Opportunity321'
			LIMIT 1
		];
		System.assertEquals(list_BOs[0].Opportunity__r.ID__c, 'HIBORTRANSFERaasmEvent321', 'ID__c will be generated by HIBorTransferTriggerHelper.');
		System.assertEquals(list_BOs[0].Application_Status__c, 'Implementing Plans', 'Benefit Order, Application Status has been update with respect to HI_BoR_Transfer__c Status');
		System.assertEquals(list_BOs[0].Opportunity__r.LeadSource, HIBorTransferTriggerHelper.BOR_Transfer, 'Opp Lead Source should be '+HIBorTransferTriggerHelper.BOR_Transfer);
	}

	/**
	 * @author       Bhagat Singh
	 * @description  This method is used to test the HI_BoR_Transfer__c record with Status__c as bor_complete.
	 * @param        NA
	 * @return       NA
	 **/
	@isTest
	static void completeHIBORTransferRecord() {
		Test.startTest();
		HIBorTransferTriggerHelper.skipTrigger = true;
		HI_BoR_Transfer__c objHIBorRecord = new TestDataFactory.HIBoRTransferBuilder()
			.setExternalKey('Opportunity321')
			.setCompanyId('700100')
			.setId('aasmEvent321')
			.setStatus('implementing_plans')
			.setBenefitTypes('fsa')
			.setMedicalRenewalMonth('January')
			.build();
		insert objHIBorRecord;
		HIBorTransferTriggerHelper.skipTrigger = false;

		objHIBorRecord.Status__c = 'bor_complete';
		update objHIBorRecord;

		Test.stopTest();

		List<Benefit_Order__c> list_BOs = [
			SELECT Id, Application_Status__c, Opportunity__r.ID__c, Opportunity__r.Source_ID__c
			FROM Benefit_Order__c
			WHERE Opportunity__r.Source_ID__c = 'Opportunity321'
			LIMIT 1
		];
		System.assertEquals(list_BOs[0].Opportunity__r.ID__c, 'HIBORTRANSFERaasmEvent321', 'ID__c will be generated by HIBorTransferTriggerHelper.');
		System.assertEquals(list_BOs[0].Application_Status__c, 'BoR Complete', 'Benefit Order, Application Status has been update with respect to HI_BoR_Transfer__c Status');
	}

	/**
	 * @author       Bhagat Singh
	 * @description  This method is used to test the HI_BoR_Transfer__c record with Status__c as bor_complete Negative Case.
	 * @param        NA
	 * @return       NA
	 **/
	@isTest
	static void HIBORTransferRecordNegativeCase() {
		Utils.skipTrigger(true);
		HIBorTransferTriggerHelper.skipTrigger = true;
		List<Opportunity> list_Opps = [SELECT Id, ID__c, Source_ID__c FROM Opportunity WHERE Source_ID__c = 'Opportunity321' LIMIT 1];
		list_Opps[0].StageName = 'Order Lost';
		list_Opps[0].LeadSource = 'NP application';
		update list_Opps[0];

		HIBorTransferTriggerHelper.skipTrigger = false;
		Utils.skipTrigger(false);

		Test.startTest();
		HI_BoR_Transfer__c objHIBorRecord = new TestDataFactory.HIBoRTransferBuilder()
			.setExternalKey('Opportunity321')
			.setCompanyId('700100')
			.setId('aasmEvent321')
			.setStatus('implementing_plans')
			.setBenefitTypes('fsa')
			.setMedicalRenewalMonth('January')
			.build();
		insert objHIBorRecord;

		objHIBorRecord.Status__c = 'bor_complete';
		update objHIBorRecord;

		Test.stopTest();

		Id idOpp = list_Opps[0].Id;
		list_Opps = [SELECT Id, ID__c, Source_ID__c, LeadSource FROM Opportunity WHERE Id = :idOpp];
		System.assertEquals(list_Opps[0].Source_ID__c, null, 'Source Id has been blank');
		System.assertEquals(list_Opps[0].LeadSource, 'NP application', 'Lead Source value should not changed');
	}

	/**
	 * @author       Bhagat Singh
	 * @description  This method is used to delete the HI_BoR_Transfer__c record.
	 * @param        NA
	 * @return       NA
	 **/
	@isTest
	static void deleteHIBORTransferRecord() {
		Test.startTest();
		HIBorTransferTriggerHelper.skipTrigger = true;
		HI_BoR_Transfer__c objHIBorRecord = new TestDataFactory.HIBoRTransferBuilder()
			.setExternalKey('Opportunity321')
			.setCompanyId('700100')
			.setId('aasmEvent321')
			.setStatus('implementing_plans')
			.setBenefitTypes('fsa')
			.setMedicalRenewalMonth('January')
			.build();
		insert objHIBorRecord;

		HIBorTransferTriggerHelper.skipTrigger = false;

		HIBorTransferTriggerHelper.OnAfterUpdateAsync(null);
		HIBorTransferTriggerHelper.OnAfterDeleteAsync(null);

		delete objHIBorRecord;
		undelete objHIBorRecord;

		Test.stopTest();

		List<HI_BoR_Transfer__c> list_HIBORTransfer = [SELECT Id, External_Key__c FROM HI_BoR_Transfer__c WHERE Id__c = 'aasmEvent321'];
		System.assertEquals(list_HIBORTransfer[0].External_Key__c, 'Opportunity321');
	}
}